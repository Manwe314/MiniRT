t_minirt *minirt;
	int x;
	int y;
	t_vector3 ray_direction;
	t_vector3 ray_origin;
	float a, b, c;
	float discriminant;
	t_vector2 coordinate;
	t_sphere *sphere;
	t_vector2	hit_distance;
	t_vector3	hit_position;
	t_vector3	normal;
	t_vector3 	light_direction;
	float intensity;

	minirt = param;
	sphere = minirt->input_head->object;
	x = 0;
	ray_origin.x = 0;
	ray_origin.y = 0;
	ray_origin.z = -100;
	light_direction.x = 1;
	light_direction.y = 1;
	light_direction.z = 1;
	light_direction = normalize(light_direction);
	while (x < minirt->width)
	{
		y = 0;
		while (y < minirt->height)
		{
			coordinate.x = (float)x / (float)minirt->width;
			coordinate.y = (float)y / (float)minirt->height;
			coordinate.x = (coordinate.x * 2.0f) - 1.0f;
			coordinate.y = (coordinate.y * 2.0f) - 1.0f;
			ray_direction.x = coordinate.x;
			ray_direction.y = coordinate.y;
			ray_direction.z = 1;

			a = dot(ray_direction, ray_direction);
			b = 2 * dot(ray_origin, ray_direction);
			c = dot(ray_origin, ray_origin) - (sphere->radius * sphere->radius);

			discriminant = (b * b) - (4 * a * c);
			if (discriminant >= 0)
			{
				hit_distance.x = (-b - sqrt(discriminant)) / (2.0f * a);
				hit_position = multiply_vector_scalar(ray_direction, hit_distance.x);
				hit_position = add_vector3(ray_origin, hit_position);
				//printf("%f | %f | %f\n", hit_position.x, hit_position.y, hit_position.z);
				normal = subtract_vector3(hit_position, sphere->center);
				normal = normalize(normal);
				intensity = max(dot(normal, multiply_vector_scalar(light_direction, -1)), 0.0f);
				mlx_put_pixel(minirt->img, x, y, get_rgba((int)(3 * intensity),(int)(252 * intensity),(int)(252 * intensity), 255));
			}
			else
				mlx_put_pixel(minirt->img, x, y, get_rgba(189, 195, 199, 255));
			//printf("x: %d\ny: %d\n", x, y);
			y++;
		}
		x++;
	}
